/*
 * generated by Xtext 2.14.0
 */
package unice.epu.carpilot.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CarpilotGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Car");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNamedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRulesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRulesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_1_0 = (RuleCall)cRulesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLineFeedKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRulesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_2_1_0 = (RuleCall)cRulesAssignment_1_2_1.eContents().get(0);
		private final Keyword cOrdersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOrdersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOrdersCommandParserRuleCall_4_0 = (RuleCall)cOrdersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLineFeedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOrdersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOrdersCommandParserRuleCall_5_1_0 = (RuleCall)cOrdersAssignment_5_1.eContents().get(0);
		
		//Car:
		//	('named' name=EString)? ('rules:\n' rules+=Rule ('\n' rules+=Rule)*)?
		//	'orders:' '\n' orders+=Command ('\n' orders+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('named' name=EString)? ('rules:\n' rules+=Rule ('\n' rules+=Rule)*)? 'orders:' '\n' orders+=Command ('\n'
		//orders+=Command)*
		public Group getGroup() { return cGroup; }
		
		//('named' name=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'named'
		public Keyword getNamedKeyword_0_0() { return cNamedKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//('rules:\n' rules+=Rule ('\n' rules+=Rule)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'rules:\n'
		public Keyword getRulesKeyword_1_0() { return cRulesKeyword_1_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_1_1() { return cRulesAssignment_1_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_1_0() { return cRulesRuleParserRuleCall_1_1_0; }
		
		//('\n' rules+=Rule)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'\n'
		public Keyword getLineFeedKeyword_1_2_0() { return cLineFeedKeyword_1_2_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_1_2_1() { return cRulesAssignment_1_2_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_2_1_0() { return cRulesRuleParserRuleCall_1_2_1_0; }
		
		//'orders:'
		public Keyword getOrdersKeyword_2() { return cOrdersKeyword_2; }
		
		//'\n'
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//orders+=Command
		public Assignment getOrdersAssignment_4() { return cOrdersAssignment_4; }
		
		//Command
		public RuleCall getOrdersCommandParserRuleCall_4_0() { return cOrdersCommandParserRuleCall_4_0; }
		
		//('\n' orders+=Command)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'\n'
		public Keyword getLineFeedKeyword_5_0() { return cLineFeedKeyword_5_0; }
		
		//orders+=Command
		public Assignment getOrdersAssignment_5_1() { return cOrdersAssignment_5_1; }
		
		//Command
		public RuleCall getOrdersCommandParserRuleCall_5_1_0() { return cOrdersCommandParserRuleCall_5_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDistanceConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	ColorCondition | DistanceCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//ColorCondition | DistanceCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColorCondition
		public RuleCall getColorConditionParserRuleCall_0() { return cColorConditionParserRuleCall_0; }
		
		//DistanceCondition
		public RuleCall getDistanceConditionParserRuleCall_1() { return cDistanceConditionParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPersistingRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rule:
		//	PersistingRule | DirectRule;
		@Override public ParserRule getRule() { return rule; }
		
		//PersistingRule | DirectRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PersistingRule
		public RuleCall getPersistingRuleParserRuleCall_0() { return cPersistingRuleParserRuleCall_0; }
		
		//DirectRule
		public RuleCall getDirectRuleParserRuleCall_1() { return cDirectRuleParserRuleCall_1; }
	}
	public class DirectRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.DirectRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffectRuleEffectParserRuleCall_2_0 = (RuleCall)cEffectAssignment_2.eContents().get(0);
		
		//DirectRule Rule:
		//	condition=Condition '->' effect=RuleEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition '->' effect=RuleEffect
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//effect=RuleEffect
		public Assignment getEffectAssignment_2() { return cEffectAssignment_2; }
		
		//RuleEffect
		public RuleCall getEffectRuleEffectParserRuleCall_2_0() { return cEffectRuleEffectParserRuleCall_2_0; }
	}
	public class PersistingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.PersistingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffectRuleEffectParserRuleCall_2_0 = (RuleCall)cEffectAssignment_2.eContents().get(0);
		private final Keyword cUntilKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStopAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStopConditionParserRuleCall_4_0 = (RuleCall)cStopAssignment_4.eContents().get(0);
		
		//PersistingRule:
		//	condition=Condition '->' effect=RuleEffect 'until' stop=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition '->' effect=RuleEffect 'until' stop=Condition
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//effect=RuleEffect
		public Assignment getEffectAssignment_2() { return cEffectAssignment_2; }
		
		//RuleEffect
		public RuleCall getEffectRuleEffectParserRuleCall_2_0() { return cEffectRuleEffectParserRuleCall_2_0; }
		
		//'until'
		public Keyword getUntilKeyword_3() { return cUntilKeyword_3; }
		
		//stop=Condition
		public Assignment getStopAssignment_4() { return cStopAssignment_4; }
		
		//Condition
		public RuleCall getStopConditionParserRuleCall_4_0() { return cStopConditionParserRuleCall_4_0; }
	}
	public class RuleEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.RuleEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbilityEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleEffect:
		//	CommandEffect | AbilityEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//CommandEffect | AbilityEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CommandEffect
		public RuleCall getCommandEffectParserRuleCall_0() { return cCommandEffectParserRuleCall_0; }
		
		//AbilityEffect
		public RuleCall getAbilityEffectParserRuleCall_1() { return cAbilityEffectParserRuleCall_1; }
	}
	public class CommandEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.CommandEffect");
		private final Assignment cCommandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_0 = (RuleCall)cCommandAssignment.eContents().get(0);
		
		//CommandEffect:
		//	command=Command;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Command
		public Assignment getCommandAssignment() { return cCommandAssignment; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0() { return cCommandCommandParserRuleCall_0; }
	}
	public class AbilityEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.AbilityEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDisableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDisableNotKeyword_1_0 = (Keyword)cDisableAssignment_1.eContents().get(0);
		private final Keyword cGoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionDirectionEnumRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		
		//AbilityEffect:
		//	'can' disable?='not'? 'go' direction=Direction;
		@Override public ParserRule getRule() { return rule; }
		
		//'can' disable?='not'? 'go' direction=Direction
		public Group getGroup() { return cGroup; }
		
		//'can'
		public Keyword getCanKeyword_0() { return cCanKeyword_0; }
		
		//disable?='not'?
		public Assignment getDisableAssignment_1() { return cDisableAssignment_1; }
		
		//'not'
		public Keyword getDisableNotKeyword_1_0() { return cDisableNotKeyword_1_0; }
		
		//'go'
		public Keyword getGoKeyword_2() { return cGoKeyword_2; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_3_0() { return cDirectionDirectionEnumRuleCall_3_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDirectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirectionDirectionEnumRuleCall_1_1_0 = (RuleCall)cDirectionAssignment_1_1.eContents().get(0);
		
		//Command:
		//	{Command} ('go'? direction=Direction)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Command} ('go'? direction=Direction)?
		public Group getGroup() { return cGroup; }
		
		//{Command}
		public Action getCommandAction_0() { return cCommandAction_0; }
		
		//('go'? direction=Direction)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'go'?
		public Keyword getGoKeyword_1_0() { return cGoKeyword_1_0; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_1_1() { return cDirectionAssignment_1_1; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_1_1_0() { return cDirectionDirectionEnumRuleCall_1_1_0; }
	}
	public class ColorConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.ColorCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cColorConditionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cColorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cColorColorEnumRuleCall_0_1_0_0 = (RuleCall)cColorAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cCameraAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cCameraCameraEnumRuleCall_0_1_2_0 = (RuleCall)cCameraAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCameraAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCameraCameraEnumRuleCall_1_0_0 = (RuleCall)cCameraAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cColorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cColorColorEnumRuleCall_1_2_0 = (RuleCall)cColorAssignment_1_2.eContents().get(0);
		
		//ColorCondition:
		//	{ColorCondition} (color=Color '==' camera=Camera) | camera=Camera '==' color=Color;
		@Override public ParserRule getRule() { return rule; }
		
		//{ColorCondition} (color=Color '==' camera=Camera) | camera=Camera '==' color=Color
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ColorCondition} (color=Color '==' camera=Camera)
		public Group getGroup_0() { return cGroup_0; }
		
		//{ColorCondition}
		public Action getColorConditionAction_0_0() { return cColorConditionAction_0_0; }
		
		//color=Color '==' camera=Camera
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//color=Color
		public Assignment getColorAssignment_0_1_0() { return cColorAssignment_0_1_0; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_0_1_0_0() { return cColorColorEnumRuleCall_0_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0_1_1() { return cEqualsSignEqualsSignKeyword_0_1_1; }
		
		//camera=Camera
		public Assignment getCameraAssignment_0_1_2() { return cCameraAssignment_0_1_2; }
		
		//Camera
		public RuleCall getCameraCameraEnumRuleCall_0_1_2_0() { return cCameraCameraEnumRuleCall_0_1_2_0; }
		
		//camera=Camera '==' color=Color
		public Group getGroup_1() { return cGroup_1; }
		
		//camera=Camera
		public Assignment getCameraAssignment_1_0() { return cCameraAssignment_1_0; }
		
		//Camera
		public RuleCall getCameraCameraEnumRuleCall_1_0_0() { return cCameraCameraEnumRuleCall_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }
		
		//color=Color
		public Assignment getColorAssignment_1_2() { return cColorAssignment_1_2; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_1_2_0() { return cColorColorEnumRuleCall_1_2_0; }
	}
	public class DistanceConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.DistanceCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSensorSensorEnumRuleCall_0_0 = (RuleCall)cSensorAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAnalogOperandEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceFloatParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		
		//DistanceCondition:
		//	sensor=Sensor operator=AnalogOperand distance=Float;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=Sensor operator=AnalogOperand distance=Float
		public Group getGroup() { return cGroup; }
		
		//sensor=Sensor
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//Sensor
		public RuleCall getSensorSensorEnumRuleCall_0_0() { return cSensorSensorEnumRuleCall_0_0; }
		
		//operator=AnalogOperand
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//AnalogOperand
		public RuleCall getOperatorAnalogOperandEnumRuleCall_1_0() { return cOperatorAnalogOperandEnumRuleCall_1_0; }
		
		//distance=Float
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//Float
		public RuleCall getDistanceFloatParserRuleCall_2_0() { return cDistanceFloatParserRuleCall_2_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Float ecore::EFloat:
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	public class AnalogOperandElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.AnalogOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterGreaterThanSignKeyword_1_0 = (Keyword)cGreaterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLowerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLowerLessThanSignKeyword_2_0 = (Keyword)cLowerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualsGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualsEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLowerEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLowerEqualsLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLowerEqualsEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum AnalogOperand:
		//	equals='==' | greater='>' | lower='<' | greaterEquals='>=' | lowerEquals='<=';
		public EnumRule getRule() { return rule; }
		
		//equals='==' | greater='>' | lower='<' | greaterEquals='>=' | lowerEquals='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equals='=='
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEqualsEqualsSignEqualsSignKeyword_0_0() { return cEqualsEqualsSignEqualsSignKeyword_0_0; }
		
		//greater='>'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_1() { return cGreaterEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGreaterGreaterThanSignKeyword_1_0() { return cGreaterGreaterThanSignKeyword_1_0; }
		
		//lower='<'
		public EnumLiteralDeclaration getLowerEnumLiteralDeclaration_2() { return cLowerEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLowerLessThanSignKeyword_2_0() { return cLowerLessThanSignKeyword_2_0; }
		
		//greaterEquals='>='
		public EnumLiteralDeclaration getGreaterEqualsEnumLiteralDeclaration_3() { return cGreaterEqualsEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGreaterEqualsGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualsGreaterThanSignEqualsSignKeyword_3_0; }
		
		//lowerEquals='<='
		public EnumLiteralDeclaration getLowerEqualsEnumLiteralDeclaration_4() { return cLowerEqualsEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLowerEqualsLessThanSignEqualsSignKeyword_4_0() { return cLowerEqualsLessThanSignEqualsSignKeyword_4_0; }
	}
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRedRedKeyword_0_0 = (Keyword)cRedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBlueBlueKeyword_1_0 = (Keyword)cBlueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOrangeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOrangeOrangeKeyword_2_0 = (Keyword)cOrangeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBlackBlackKeyword_3_0 = (Keyword)cBlackEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWhiteWhiteKeyword_4_0 = (Keyword)cWhiteEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBuildingEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBuildingBuildingKeyword_5_0 = (Keyword)cBuildingEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Color:
		//	red | blue | orange | black | white | building;
		public EnumRule getRule() { return rule; }
		
		//red | blue | orange | black | white | building
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//red
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_0() { return cRedEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getRedRedKeyword_0_0() { return cRedRedKeyword_0_0; }
		
		//blue
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_1() { return cBlueEnumLiteralDeclaration_1; }
		
		//'blue'
		public Keyword getBlueBlueKeyword_1_0() { return cBlueBlueKeyword_1_0; }
		
		//orange
		public EnumLiteralDeclaration getOrangeEnumLiteralDeclaration_2() { return cOrangeEnumLiteralDeclaration_2; }
		
		//'orange'
		public Keyword getOrangeOrangeKeyword_2_0() { return cOrangeOrangeKeyword_2_0; }
		
		//black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_3() { return cBlackEnumLiteralDeclaration_3; }
		
		//'black'
		public Keyword getBlackBlackKeyword_3_0() { return cBlackBlackKeyword_3_0; }
		
		//white
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_4() { return cWhiteEnumLiteralDeclaration_4; }
		
		//'white'
		public Keyword getWhiteWhiteKeyword_4_0() { return cWhiteWhiteKeyword_4_0; }
		
		//building
		public EnumLiteralDeclaration getBuildingEnumLiteralDeclaration_5() { return cBuildingEnumLiteralDeclaration_5; }
		
		//"building"
		public Keyword getBuildingBuildingKeyword_5_0() { return cBuildingBuildingKeyword_5_0; }
	}
	public class CameraElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Camera");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVery_rightEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVery_rightVeryRightKeyword_0_0 = (Keyword)cVery_rightEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVery_leftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVery_leftVeryLeftKeyword_1_0 = (Keyword)cVery_leftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLeftLeftKeyword_2_0 = (Keyword)cLeftEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRightRightKeyword_3_0 = (Keyword)cRightEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCenterEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCenterCenterKeyword_4_0 = (Keyword)cCenterEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Camera:
		//	very_right='very right' | very_left='very left' | left | right | center;
		public EnumRule getRule() { return rule; }
		
		//very_right='very right' | very_left='very left' | left | right | center
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//very_right='very right'
		public EnumLiteralDeclaration getVery_rightEnumLiteralDeclaration_0() { return cVery_rightEnumLiteralDeclaration_0; }
		
		//'very right'
		public Keyword getVery_rightVeryRightKeyword_0_0() { return cVery_rightVeryRightKeyword_0_0; }
		
		//very_left='very left'
		public EnumLiteralDeclaration getVery_leftEnumLiteralDeclaration_1() { return cVery_leftEnumLiteralDeclaration_1; }
		
		//'very left'
		public Keyword getVery_leftVeryLeftKeyword_1_0() { return cVery_leftVeryLeftKeyword_1_0; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_2() { return cLeftEnumLiteralDeclaration_2; }
		
		//'left'
		public Keyword getLeftLeftKeyword_2_0() { return cLeftLeftKeyword_2_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_3() { return cRightEnumLiteralDeclaration_3; }
		
		//'right'
		public Keyword getRightRightKeyword_3_0() { return cRightRightKeyword_3_0; }
		
		//center
		public EnumLiteralDeclaration getCenterEnumLiteralDeclaration_4() { return cCenterEnumLiteralDeclaration_4; }
		
		//'center'
		public Keyword getCenterCenterKeyword_4_0() { return cCenterCenterKeyword_4_0; }
	}
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardForwardKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLeftLeftKeyword_1_0 = (Keyword)cLeftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRightRightKeyword_2_0 = (Keyword)cRightEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBackwardBackwardKeyword_3_0 = (Keyword)cBackwardEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStopEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStopStopKeyword_4_0 = (Keyword)cStopEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Direction:
		//	forward | left | right | backward | stop;
		public EnumRule getRule() { return rule; }
		
		//forward | left | right | backward | stop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forward
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getForwardForwardKeyword_0_0() { return cForwardForwardKeyword_0_0; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_1() { return cLeftEnumLiteralDeclaration_1; }
		
		//'left'
		public Keyword getLeftLeftKeyword_1_0() { return cLeftLeftKeyword_1_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_2() { return cRightEnumLiteralDeclaration_2; }
		
		//'right'
		public Keyword getRightRightKeyword_2_0() { return cRightRightKeyword_2_0; }
		
		//backward
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_3() { return cBackwardEnumLiteralDeclaration_3; }
		
		//'backward'
		public Keyword getBackwardBackwardKeyword_3_0() { return cBackwardBackwardKeyword_3_0; }
		
		//stop
		public EnumLiteralDeclaration getStopEnumLiteralDeclaration_4() { return cStopEnumLiteralDeclaration_4; }
		
		//"stop"
		public Keyword getStopStopKeyword_4_0() { return cStopStopKeyword_4_0; }
	}
	public class SensorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "unice.epu.carpilot.xtext.Carpilot.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDistance_leftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDistance_leftDistanceLeftKeyword_0_0 = (Keyword)cDistance_leftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDistance_rightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDistance_rightDistanceRightKeyword_1_0 = (Keyword)cDistance_rightEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFrontEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFrontFrontKeyword_2_0 = (Keyword)cFrontEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Sensor:
		//	distance_left="distance left" | distance_right="distance right" | front;
		public EnumRule getRule() { return rule; }
		
		//distance_left="distance left" | distance_right="distance right" | front
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//distance_left="distance left"
		public EnumLiteralDeclaration getDistance_leftEnumLiteralDeclaration_0() { return cDistance_leftEnumLiteralDeclaration_0; }
		
		//"distance left"
		public Keyword getDistance_leftDistanceLeftKeyword_0_0() { return cDistance_leftDistanceLeftKeyword_0_0; }
		
		//distance_right="distance right"
		public EnumLiteralDeclaration getDistance_rightEnumLiteralDeclaration_1() { return cDistance_rightEnumLiteralDeclaration_1; }
		
		//"distance right"
		public Keyword getDistance_rightDistanceRightKeyword_1_0() { return cDistance_rightDistanceRightKeyword_1_0; }
		
		//front
		public EnumLiteralDeclaration getFrontEnumLiteralDeclaration_2() { return cFrontEnumLiteralDeclaration_2; }
		
		//"front"
		public Keyword getFrontFrontKeyword_2_0() { return cFrontFrontKeyword_2_0; }
	}
	
	private final CarElements pCar;
	private final ConditionElements pCondition;
	private final EStringElements pEString;
	private final RuleElements pRule;
	private final DirectRuleElements pDirectRule;
	private final PersistingRuleElements pPersistingRule;
	private final RuleEffectElements pRuleEffect;
	private final CommandEffectElements pCommandEffect;
	private final AbilityEffectElements pAbilityEffect;
	private final CommandElements pCommand;
	private final ColorConditionElements pColorCondition;
	private final DistanceConditionElements pDistanceCondition;
	private final FloatElements pFloat;
	private final AnalogOperandElements eAnalogOperand;
	private final ColorElements eColor;
	private final CameraElements eCamera;
	private final DirectionElements eDirection;
	private final SensorElements eSensor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CarpilotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCar = new CarElements();
		this.pCondition = new ConditionElements();
		this.pEString = new EStringElements();
		this.pRule = new RuleElements();
		this.pDirectRule = new DirectRuleElements();
		this.pPersistingRule = new PersistingRuleElements();
		this.pRuleEffect = new RuleEffectElements();
		this.pCommandEffect = new CommandEffectElements();
		this.pAbilityEffect = new AbilityEffectElements();
		this.pCommand = new CommandElements();
		this.pColorCondition = new ColorConditionElements();
		this.pDistanceCondition = new DistanceConditionElements();
		this.pFloat = new FloatElements();
		this.eAnalogOperand = new AnalogOperandElements();
		this.eColor = new ColorElements();
		this.eCamera = new CameraElements();
		this.eDirection = new DirectionElements();
		this.eSensor = new SensorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("unice.epu.carpilot.xtext.Carpilot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Car:
	//	('named' name=EString)? ('rules:\n' rules+=Rule ('\n' rules+=Rule)*)?
	//	'orders:' '\n' orders+=Command ('\n' orders+=Command)*;
	public CarElements getCarAccess() {
		return pCar;
	}
	
	public ParserRule getCarRule() {
		return getCarAccess().getRule();
	}
	
	//Condition:
	//	ColorCondition | DistanceCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Rule:
	//	PersistingRule | DirectRule;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//DirectRule Rule:
	//	condition=Condition '->' effect=RuleEffect;
	public DirectRuleElements getDirectRuleAccess() {
		return pDirectRule;
	}
	
	public ParserRule getDirectRuleRule() {
		return getDirectRuleAccess().getRule();
	}
	
	//PersistingRule:
	//	condition=Condition '->' effect=RuleEffect 'until' stop=Condition;
	public PersistingRuleElements getPersistingRuleAccess() {
		return pPersistingRule;
	}
	
	public ParserRule getPersistingRuleRule() {
		return getPersistingRuleAccess().getRule();
	}
	
	//RuleEffect:
	//	CommandEffect | AbilityEffect;
	public RuleEffectElements getRuleEffectAccess() {
		return pRuleEffect;
	}
	
	public ParserRule getRuleEffectRule() {
		return getRuleEffectAccess().getRule();
	}
	
	//CommandEffect:
	//	command=Command;
	public CommandEffectElements getCommandEffectAccess() {
		return pCommandEffect;
	}
	
	public ParserRule getCommandEffectRule() {
		return getCommandEffectAccess().getRule();
	}
	
	//AbilityEffect:
	//	'can' disable?='not'? 'go' direction=Direction;
	public AbilityEffectElements getAbilityEffectAccess() {
		return pAbilityEffect;
	}
	
	public ParserRule getAbilityEffectRule() {
		return getAbilityEffectAccess().getRule();
	}
	
	//Command:
	//	{Command} ('go'? direction=Direction)?;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//ColorCondition:
	//	{ColorCondition} (color=Color '==' camera=Camera) | camera=Camera '==' color=Color;
	public ColorConditionElements getColorConditionAccess() {
		return pColorCondition;
	}
	
	public ParserRule getColorConditionRule() {
		return getColorConditionAccess().getRule();
	}
	
	//DistanceCondition:
	//	sensor=Sensor operator=AnalogOperand distance=Float;
	public DistanceConditionElements getDistanceConditionAccess() {
		return pDistanceCondition;
	}
	
	public ParserRule getDistanceConditionRule() {
		return getDistanceConditionAccess().getRule();
	}
	
	//Float ecore::EFloat:
	//	INT ('.' INT)?;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//enum AnalogOperand:
	//	equals='==' | greater='>' | lower='<' | greaterEquals='>=' | lowerEquals='<=';
	public AnalogOperandElements getAnalogOperandAccess() {
		return eAnalogOperand;
	}
	
	public EnumRule getAnalogOperandRule() {
		return getAnalogOperandAccess().getRule();
	}
	
	//enum Color:
	//	red | blue | orange | black | white | building;
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//enum Camera:
	//	very_right='very right' | very_left='very left' | left | right | center;
	public CameraElements getCameraAccess() {
		return eCamera;
	}
	
	public EnumRule getCameraRule() {
		return getCameraAccess().getRule();
	}
	
	//enum Direction:
	//	forward | left | right | backward | stop;
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//enum Sensor:
	//	distance_left="distance left" | distance_right="distance right" | front;
	public SensorElements getSensorAccess() {
		return eSensor;
	}
	
	public EnumRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
