// automatically generated by Xtext
grammar unice.epu.carpilot.xtext.Carpilot with org.eclipse.xtext.common.Terminals

import "http://www.example.org/carpilot" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Car returns Car:
		('named' name=EString)?
		('rules:\n' rules+=Rule ( '\n' rules+=Rule)* )?
		'orders:' '\n' orders+=Command ( '\n' orders+=Command)* 
		;



Condition returns Condition:
	ColorCondition|
	DistanceCondition;

EString returns ecore::EString:
	STRING | ID;

Rule returns Rule:
	PersistingRule |
	DirectRule ;
	
DirectRule returns Rule:
	condition=Condition '->' effect=RuleEffect
;

PersistingRule returns PersistingRule:
	condition=Condition '->' effect=RuleEffect 'until' stop=Condition
;
RuleEffect returns RuleEffect:
	CommandEffect | 
	AbilityEffect
;

CommandEffect returns CommandEffect:
	command=Command 
;

AbilityEffect returns AbilityEffect:
	'can' (disable?='not')?'go' direction=Direction 
;



Command returns Command:
	{Command}
	('go'? direction=Direction)? ;


ColorCondition returns ColorCondition:
	{ColorCondition}
	(color=Color'==' camera=Camera)
	|(camera=Camera'=='color=Color);
DistanceCondition returns DistanceCondition:
	sensor=Sensor operator=AnalogOperand distance=Float 
;
Float returns ecore::EFloat: INT ('.' INT)?;
enum AnalogOperand returns AnalogOperand:
	equals='==' | greater='>' | lower='<' | greaterEquals ='>=' | lowerEquals='<='
;
enum Color returns Color:
				red = 'red' | blue = 'blue' | orange='orange' | black='black' | white='white'| building="building";

enum Camera returns Camera:
				very_right= 'very right' | very_left='very left' | left='left' | right='right' | center='center';

enum Direction returns Direction:
				forward = 'forward' | left = 'left' | right = 'right' | backward = 'backward' | stop="stop";
enum Sensor returns Sensor:
	distance_left="distance left" | distance_right="distance right" | front="front"
;