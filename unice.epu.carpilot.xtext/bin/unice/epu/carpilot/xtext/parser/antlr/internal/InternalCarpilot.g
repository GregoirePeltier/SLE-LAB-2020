/*
 * generated by Xtext 2.14.0
 */
grammar InternalCarpilot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package unice.epu.carpilot.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package unice.epu.carpilot.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import unice.epu.carpilot.xtext.services.CarpilotGrammarAccess;

}

@parser::members {

 	private CarpilotGrammarAccess grammarAccess;

    public InternalCarpilotParser(TokenStream input, CarpilotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Car";
   	}

   	@Override
   	protected CarpilotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCar
entryRuleCar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCarRule()); }
	iv_ruleCar=ruleCar
	{ $current=$iv_ruleCar.current; }
	EOF;

// Rule Car
ruleCar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='named'
			{
				newLeafNode(otherlv_0, grammarAccess.getCarAccess().getNamedKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCarAccess().getNameEStringParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCarRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"unice.epu.carpilot.xtext.Carpilot.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_2='rules:\n'
			{
				newLeafNode(otherlv_2, grammarAccess.getCarAccess().getRulesKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCarAccess().getRulesRuleParserRuleCall_1_1_0());
					}
					lv_rules_3_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCarRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"unice.epu.carpilot.xtext.Carpilot.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4='\n'
				{
					newLeafNode(otherlv_4, grammarAccess.getCarAccess().getLineFeedKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCarAccess().getRulesRuleParserRuleCall_1_2_1_0());
						}
						lv_rules_5_0=ruleRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCarRule());
							}
							add(
								$current,
								"rules",
								lv_rules_5_0,
								"unice.epu.carpilot.xtext.Carpilot.Rule");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='orders:'
		{
			newLeafNode(otherlv_6, grammarAccess.getCarAccess().getOrdersKeyword_2());
		}
		otherlv_7='\n'
		{
			newLeafNode(otherlv_7, grammarAccess.getCarAccess().getLineFeedKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getOrdersCommandParserRuleCall_4_0());
				}
				lv_orders_8_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"orders",
						lv_orders_8_0,
						"unice.epu.carpilot.xtext.Carpilot.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9='\n'
			{
				newLeafNode(otherlv_9, grammarAccess.getCarAccess().getLineFeedKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCarAccess().getOrdersCommandParserRuleCall_5_1_0());
					}
					lv_orders_10_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCarRule());
						}
						add(
							$current,
							"orders",
							lv_orders_10_0,
							"unice.epu.carpilot.xtext.Carpilot.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionAccess().getColorConditionParserRuleCall_0());
		}
		this_ColorCondition_0=ruleColorCondition
		{
			$current = $this_ColorCondition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionAccess().getDistanceConditionParserRuleCall_1());
		}
		this_DistanceCondition_1=ruleDistanceCondition
		{
			$current = $this_DistanceCondition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleAccess().getPersistingRuleParserRuleCall_0());
		}
		this_PersistingRule_0=rulePersistingRule
		{
			$current = $this_PersistingRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getDirectRuleParserRuleCall_1());
		}
		this_DirectRule_1=ruleDirectRule
		{
			$current = $this_DirectRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDirectRule
entryRuleDirectRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectRuleRule()); }
	iv_ruleDirectRule=ruleDirectRule
	{ $current=$iv_ruleDirectRule.current; }
	EOF;

// Rule DirectRule
ruleDirectRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectRuleAccess().getConditionConditionParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectRuleRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"unice.epu.carpilot.xtext.Carpilot.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getDirectRuleAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectRuleAccess().getEffectRuleEffectParserRuleCall_2_0());
				}
				lv_effect_2_0=ruleRuleEffect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectRuleRule());
					}
					set(
						$current,
						"effect",
						lv_effect_2_0,
						"unice.epu.carpilot.xtext.Carpilot.RuleEffect");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePersistingRule
entryRulePersistingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPersistingRuleRule()); }
	iv_rulePersistingRule=rulePersistingRule
	{ $current=$iv_rulePersistingRule.current; }
	EOF;

// Rule PersistingRule
rulePersistingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPersistingRuleAccess().getConditionConditionParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPersistingRuleRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"unice.epu.carpilot.xtext.Carpilot.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getPersistingRuleAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPersistingRuleAccess().getEffectRuleEffectParserRuleCall_2_0());
				}
				lv_effect_2_0=ruleRuleEffect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPersistingRuleRule());
					}
					set(
						$current,
						"effect",
						lv_effect_2_0,
						"unice.epu.carpilot.xtext.Carpilot.RuleEffect");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='until'
		{
			newLeafNode(otherlv_3, grammarAccess.getPersistingRuleAccess().getUntilKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPersistingRuleAccess().getStopConditionParserRuleCall_4_0());
				}
				lv_stop_4_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPersistingRuleRule());
					}
					set(
						$current,
						"stop",
						lv_stop_4_0,
						"unice.epu.carpilot.xtext.Carpilot.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleEffect
entryRuleRuleEffect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleEffectRule()); }
	iv_ruleRuleEffect=ruleRuleEffect
	{ $current=$iv_ruleRuleEffect.current; }
	EOF;

// Rule RuleEffect
ruleRuleEffect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleEffectAccess().getCommandEffectParserRuleCall_0());
		}
		this_CommandEffect_0=ruleCommandEffect
		{
			$current = $this_CommandEffect_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleEffectAccess().getAbilityEffectParserRuleCall_1());
		}
		this_AbilityEffect_1=ruleAbilityEffect
		{
			$current = $this_AbilityEffect_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommandEffect
entryRuleCommandEffect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandEffectRule()); }
	iv_ruleCommandEffect=ruleCommandEffect
	{ $current=$iv_ruleCommandEffect.current; }
	EOF;

// Rule CommandEffect
ruleCommandEffect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCommandEffectAccess().getCommandCommandParserRuleCall_0());
			}
			lv_command_0_0=ruleCommand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCommandEffectRule());
				}
				set(
					$current,
					"command",
					lv_command_0_0,
					"unice.epu.carpilot.xtext.Carpilot.Command");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAbilityEffect
entryRuleAbilityEffect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbilityEffectRule()); }
	iv_ruleAbilityEffect=ruleAbilityEffect
	{ $current=$iv_ruleAbilityEffect.current; }
	EOF;

// Rule AbilityEffect
ruleAbilityEffect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='can'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbilityEffectAccess().getCanKeyword_0());
		}
		(
			(
				lv_disable_1_0='not'
				{
					newLeafNode(lv_disable_1_0, grammarAccess.getAbilityEffectAccess().getDisableNotKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAbilityEffectRule());
					}
					setWithLastConsumed($current, "disable", true, "not");
				}
			)
		)?
		otherlv_2='go'
		{
			newLeafNode(otherlv_2, grammarAccess.getAbilityEffectAccess().getGoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbilityEffectAccess().getDirectionDirectionEnumRuleCall_3_0());
				}
				lv_direction_3_0=ruleDirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbilityEffectRule());
					}
					set(
						$current,
						"direction",
						lv_direction_3_0,
						"unice.epu.carpilot.xtext.Carpilot.Direction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommandAccess().getCommandAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='go'
				{
					newLeafNode(otherlv_1, grammarAccess.getCommandAccess().getGoKeyword_1_0());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getDirectionDirectionEnumRuleCall_1_1_0());
					}
					lv_direction_2_0=ruleDirection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						set(
							$current,
							"direction",
							lv_direction_2_0,
							"unice.epu.carpilot.xtext.Carpilot.Direction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleColorCondition
entryRuleColorCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColorConditionRule()); }
	iv_ruleColorCondition=ruleColorCondition
	{ $current=$iv_ruleColorCondition.current; }
	EOF;

// Rule ColorCondition
ruleColorCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getColorConditionAccess().getColorConditionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getColorConditionAccess().getColorColorEnumRuleCall_0_1_0_0());
						}
						lv_color_1_0=ruleColor
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getColorConditionRule());
							}
							set(
								$current,
								"color",
								lv_color_1_0,
								"unice.epu.carpilot.xtext.Carpilot.Color");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2='=='
				{
					newLeafNode(otherlv_2, grammarAccess.getColorConditionAccess().getEqualsSignEqualsSignKeyword_0_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getColorConditionAccess().getCameraCameraEnumRuleCall_0_1_2_0());
						}
						lv_camera_3_0=ruleCamera
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getColorConditionRule());
							}
							set(
								$current,
								"camera",
								lv_camera_3_0,
								"unice.epu.carpilot.xtext.Carpilot.Camera");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getColorConditionAccess().getCameraCameraEnumRuleCall_1_0_0());
					}
					lv_camera_4_0=ruleCamera
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColorConditionRule());
						}
						set(
							$current,
							"camera",
							lv_camera_4_0,
							"unice.epu.carpilot.xtext.Carpilot.Camera");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='=='
			{
				newLeafNode(otherlv_5, grammarAccess.getColorConditionAccess().getEqualsSignEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColorConditionAccess().getColorColorEnumRuleCall_1_2_0());
					}
					lv_color_6_0=ruleColor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColorConditionRule());
						}
						set(
							$current,
							"color",
							lv_color_6_0,
							"unice.epu.carpilot.xtext.Carpilot.Color");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDistanceCondition
entryRuleDistanceCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDistanceConditionRule()); }
	iv_ruleDistanceCondition=ruleDistanceCondition
	{ $current=$iv_ruleDistanceCondition.current; }
	EOF;

// Rule DistanceCondition
ruleDistanceCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDistanceConditionAccess().getSensorSensorEnumRuleCall_0_0());
				}
				lv_sensor_0_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDistanceConditionRule());
					}
					set(
						$current,
						"sensor",
						lv_sensor_0_0,
						"unice.epu.carpilot.xtext.Carpilot.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDistanceConditionAccess().getOperatorAnalogOperandEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleAnalogOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDistanceConditionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"unice.epu.carpilot.xtext.Carpilot.AnalogOperand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDistanceConditionAccess().getDistanceFloatParserRuleCall_2_0());
				}
				lv_distance_2_0=ruleFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDistanceConditionRule());
					}
					set(
						$current,
						"distance",
						lv_distance_2_0,
						"unice.epu.carpilot.xtext.Carpilot.Float");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Rule AnalogOperand
ruleAnalogOperand returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getAnalogOperandAccess().getEqualsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAnalogOperandAccess().getEqualsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getAnalogOperandAccess().getGreaterEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAnalogOperandAccess().getGreaterEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getAnalogOperandAccess().getLowerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAnalogOperandAccess().getLowerEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getAnalogOperandAccess().getGreaterEqualsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAnalogOperandAccess().getGreaterEqualsEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getAnalogOperandAccess().getLowerEqualsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAnalogOperandAccess().getLowerEqualsEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='red'
			{
				$current = grammarAccess.getColorAccess().getRedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getRedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='blue'
			{
				$current = grammarAccess.getColorAccess().getBlueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getBlueEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='orange'
			{
				$current = grammarAccess.getColorAccess().getOrangeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getColorAccess().getOrangeEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='black'
			{
				$current = grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='white'
			{
				$current = grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='building'
			{
				$current = grammarAccess.getColorAccess().getBuildingEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getColorAccess().getBuildingEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule Camera
ruleCamera returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='very right'
			{
				$current = grammarAccess.getCameraAccess().getVery_rightEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCameraAccess().getVery_rightEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='very left'
			{
				$current = grammarAccess.getCameraAccess().getVery_leftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCameraAccess().getVery_leftEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='left'
			{
				$current = grammarAccess.getCameraAccess().getLeftEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCameraAccess().getLeftEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='right'
			{
				$current = grammarAccess.getCameraAccess().getRightEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCameraAccess().getRightEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='center'
			{
				$current = grammarAccess.getCameraAccess().getCenterEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCameraAccess().getCenterEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Direction
ruleDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='forward'
			{
				$current = grammarAccess.getDirectionAccess().getForwardEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getForwardEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='left'
			{
				$current = grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='right'
			{
				$current = grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='backward'
			{
				$current = grammarAccess.getDirectionAccess().getBackwardEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectionAccess().getBackwardEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='stop'
			{
				$current = grammarAccess.getDirectionAccess().getStopEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDirectionAccess().getStopEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Sensor
ruleSensor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='distance left'
			{
				$current = grammarAccess.getSensorAccess().getDistance_leftEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSensorAccess().getDistance_leftEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='distance right'
			{
				$current = grammarAccess.getSensorAccess().getDistance_rightEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSensorAccess().getDistance_rightEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='front'
			{
				$current = grammarAccess.getSensorAccess().getFrontEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSensorAccess().getFrontEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
