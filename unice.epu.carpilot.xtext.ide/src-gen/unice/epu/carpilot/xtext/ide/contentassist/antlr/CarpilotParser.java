/*
 * generated by Xtext 2.14.0
 */
package unice.epu.carpilot.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import unice.epu.carpilot.xtext.ide.contentassist.antlr.internal.InternalCarpilotParser;
import unice.epu.carpilot.xtext.services.CarpilotGrammarAccess;

public class CarpilotParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CarpilotGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CarpilotGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
			builder.put(grammarAccess.getRuleEffectAccess().getAlternatives(), "rule__RuleEffect__Alternatives");
			builder.put(grammarAccess.getColorConditionAccess().getAlternatives(), "rule__ColorCondition__Alternatives");
			builder.put(grammarAccess.getAnalogOperandAccess().getAlternatives(), "rule__AnalogOperand__Alternatives");
			builder.put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
			builder.put(grammarAccess.getCameraAccess().getAlternatives(), "rule__Camera__Alternatives");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
			builder.put(grammarAccess.getCarAccess().getGroup(), "rule__Car__Group__0");
			builder.put(grammarAccess.getCarAccess().getGroup_0(), "rule__Car__Group_0__0");
			builder.put(grammarAccess.getCarAccess().getGroup_1(), "rule__Car__Group_1__0");
			builder.put(grammarAccess.getCarAccess().getGroup_1_2(), "rule__Car__Group_1_2__0");
			builder.put(grammarAccess.getCarAccess().getGroup_5(), "rule__Car__Group_5__0");
			builder.put(grammarAccess.getDirectRuleAccess().getGroup(), "rule__DirectRule__Group__0");
			builder.put(grammarAccess.getPersistingRuleAccess().getGroup(), "rule__PersistingRule__Group__0");
			builder.put(grammarAccess.getAbilityEffectAccess().getGroup(), "rule__AbilityEffect__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
			builder.put(grammarAccess.getColorConditionAccess().getGroup_0(), "rule__ColorCondition__Group_0__0");
			builder.put(grammarAccess.getColorConditionAccess().getGroup_0_1(), "rule__ColorCondition__Group_0_1__0");
			builder.put(grammarAccess.getColorConditionAccess().getGroup_1(), "rule__ColorCondition__Group_1__0");
			builder.put(grammarAccess.getDistanceConditionAccess().getGroup(), "rule__DistanceCondition__Group__0");
			builder.put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
			builder.put(grammarAccess.getFloatAccess().getGroup_1(), "rule__Float__Group_1__0");
			builder.put(grammarAccess.getCarAccess().getNameAssignment_0_1(), "rule__Car__NameAssignment_0_1");
			builder.put(grammarAccess.getCarAccess().getRulesAssignment_1_1(), "rule__Car__RulesAssignment_1_1");
			builder.put(grammarAccess.getCarAccess().getRulesAssignment_1_2_1(), "rule__Car__RulesAssignment_1_2_1");
			builder.put(grammarAccess.getCarAccess().getOrdersAssignment_4(), "rule__Car__OrdersAssignment_4");
			builder.put(grammarAccess.getCarAccess().getOrdersAssignment_5_1(), "rule__Car__OrdersAssignment_5_1");
			builder.put(grammarAccess.getDirectRuleAccess().getConditionAssignment_0(), "rule__DirectRule__ConditionAssignment_0");
			builder.put(grammarAccess.getDirectRuleAccess().getEffectAssignment_2(), "rule__DirectRule__EffectAssignment_2");
			builder.put(grammarAccess.getPersistingRuleAccess().getConditionAssignment_0(), "rule__PersistingRule__ConditionAssignment_0");
			builder.put(grammarAccess.getPersistingRuleAccess().getEffectAssignment_2(), "rule__PersistingRule__EffectAssignment_2");
			builder.put(grammarAccess.getPersistingRuleAccess().getStopAssignment_4(), "rule__PersistingRule__StopAssignment_4");
			builder.put(grammarAccess.getCommandEffectAccess().getCommandAssignment(), "rule__CommandEffect__CommandAssignment");
			builder.put(grammarAccess.getAbilityEffectAccess().getDisableAssignment_1(), "rule__AbilityEffect__DisableAssignment_1");
			builder.put(grammarAccess.getAbilityEffectAccess().getDirectionAssignment_3(), "rule__AbilityEffect__DirectionAssignment_3");
			builder.put(grammarAccess.getCommandAccess().getDirectionAssignment_1_1(), "rule__Command__DirectionAssignment_1_1");
			builder.put(grammarAccess.getColorConditionAccess().getColorAssignment_0_1_0(), "rule__ColorCondition__ColorAssignment_0_1_0");
			builder.put(grammarAccess.getColorConditionAccess().getCameraAssignment_0_1_2(), "rule__ColorCondition__CameraAssignment_0_1_2");
			builder.put(grammarAccess.getColorConditionAccess().getCameraAssignment_1_0(), "rule__ColorCondition__CameraAssignment_1_0");
			builder.put(grammarAccess.getColorConditionAccess().getColorAssignment_1_2(), "rule__ColorCondition__ColorAssignment_1_2");
			builder.put(grammarAccess.getDistanceConditionAccess().getSensorAssignment_0(), "rule__DistanceCondition__SensorAssignment_0");
			builder.put(grammarAccess.getDistanceConditionAccess().getOperatorAssignment_1(), "rule__DistanceCondition__OperatorAssignment_1");
			builder.put(grammarAccess.getDistanceConditionAccess().getDistanceAssignment_2(), "rule__DistanceCondition__DistanceAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CarpilotGrammarAccess grammarAccess;

	@Override
	protected InternalCarpilotParser createParser() {
		InternalCarpilotParser result = new InternalCarpilotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CarpilotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CarpilotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
