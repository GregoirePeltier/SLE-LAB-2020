/*
 * generated by Xtext 2.14.0
 */
grammar InternalCarpilot;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package unice.epu.carpilot.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package unice.epu.carpilot.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import unice.epu.carpilot.xtext.services.CarpilotGrammarAccess;

}
@parser::members {
	private CarpilotGrammarAccess grammarAccess;

	public void setGrammarAccess(CarpilotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleCar
entryRuleCar
:
{ before(grammarAccess.getCarRule()); }
	 ruleCar
{ after(grammarAccess.getCarRule()); } 
	 EOF 
;

// Rule Car
ruleCar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCarAccess().getGroup()); }
		(rule__Car__Group__0)
		{ after(grammarAccess.getCarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getAlternatives()); }
		(rule__Rule__Alternatives)
		{ after(grammarAccess.getRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectRule
entryRuleDirectRule
:
{ before(grammarAccess.getDirectRuleRule()); }
	 ruleDirectRule
{ after(grammarAccess.getDirectRuleRule()); } 
	 EOF 
;

// Rule DirectRule
ruleDirectRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectRuleAccess().getGroup()); }
		(rule__DirectRule__Group__0)
		{ after(grammarAccess.getDirectRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePersistingRule
entryRulePersistingRule
:
{ before(grammarAccess.getPersistingRuleRule()); }
	 rulePersistingRule
{ after(grammarAccess.getPersistingRuleRule()); } 
	 EOF 
;

// Rule PersistingRule
rulePersistingRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPersistingRuleAccess().getGroup()); }
		(rule__PersistingRule__Group__0)
		{ after(grammarAccess.getPersistingRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleEffect
entryRuleRuleEffect
:
{ before(grammarAccess.getRuleEffectRule()); }
	 ruleRuleEffect
{ after(grammarAccess.getRuleEffectRule()); } 
	 EOF 
;

// Rule RuleEffect
ruleRuleEffect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleEffectAccess().getAlternatives()); }
		(rule__RuleEffect__Alternatives)
		{ after(grammarAccess.getRuleEffectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandEffect
entryRuleCommandEffect
:
{ before(grammarAccess.getCommandEffectRule()); }
	 ruleCommandEffect
{ after(grammarAccess.getCommandEffectRule()); } 
	 EOF 
;

// Rule CommandEffect
ruleCommandEffect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandEffectAccess().getCommandAssignment()); }
		(rule__CommandEffect__CommandAssignment)
		{ after(grammarAccess.getCommandEffectAccess().getCommandAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbilityEffect
entryRuleAbilityEffect
:
{ before(grammarAccess.getAbilityEffectRule()); }
	 ruleAbilityEffect
{ after(grammarAccess.getAbilityEffectRule()); } 
	 EOF 
;

// Rule AbilityEffect
ruleAbilityEffect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbilityEffectAccess().getGroup()); }
		(rule__AbilityEffect__Group__0)
		{ after(grammarAccess.getAbilityEffectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColorCondition
entryRuleColorCondition
:
{ before(grammarAccess.getColorConditionRule()); }
	 ruleColorCondition
{ after(grammarAccess.getColorConditionRule()); } 
	 EOF 
;

// Rule ColorCondition
ruleColorCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorConditionAccess().getAlternatives()); }
		(rule__ColorCondition__Alternatives)
		{ after(grammarAccess.getColorConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDistanceCondition
entryRuleDistanceCondition
:
{ before(grammarAccess.getDistanceConditionRule()); }
	 ruleDistanceCondition
{ after(grammarAccess.getDistanceConditionRule()); } 
	 EOF 
;

// Rule DistanceCondition
ruleDistanceCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDistanceConditionAccess().getGroup()); }
		(rule__DistanceCondition__Group__0)
		{ after(grammarAccess.getDistanceConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloat
entryRuleFloat
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatAccess().getGroup()); }
		(rule__Float__Group__0)
		{ after(grammarAccess.getFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AnalogOperand
ruleAnalogOperand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnalogOperandAccess().getAlternatives()); }
		(rule__AnalogOperand__Alternatives)
		{ after(grammarAccess.getAnalogOperandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Color
ruleColor
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getAlternatives()); }
		(rule__Color__Alternatives)
		{ after(grammarAccess.getColorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Camera
ruleCamera
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCameraAccess().getAlternatives()); }
		(rule__Camera__Alternatives)
		{ after(grammarAccess.getCameraAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Direction
ruleDirection
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
		(rule__Direction__Alternatives)
		{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Sensor
ruleSensor
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getAlternatives()); }
		(rule__Sensor__Alternatives)
		{ after(grammarAccess.getSensorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getColorConditionParserRuleCall_0()); }
		ruleColorCondition
		{ after(grammarAccess.getConditionAccess().getColorConditionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getDistanceConditionParserRuleCall_1()); }
		ruleDistanceCondition
		{ after(grammarAccess.getConditionAccess().getDistanceConditionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getPersistingRuleParserRuleCall_0()); }
		rulePersistingRule
		{ after(grammarAccess.getRuleAccess().getPersistingRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleAccess().getDirectRuleParserRuleCall_1()); }
		ruleDirectRule
		{ after(grammarAccess.getRuleAccess().getDirectRuleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleEffect__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleEffectAccess().getCommandEffectParserRuleCall_0()); }
		ruleCommandEffect
		{ after(grammarAccess.getRuleEffectAccess().getCommandEffectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleEffectAccess().getAbilityEffectParserRuleCall_1()); }
		ruleAbilityEffect
		{ after(grammarAccess.getRuleEffectAccess().getAbilityEffectParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorConditionAccess().getGroup_0()); }
		(rule__ColorCondition__Group_0__0)
		{ after(grammarAccess.getColorConditionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getColorConditionAccess().getGroup_1()); }
		(rule__ColorCondition__Group_1__0)
		{ after(grammarAccess.getColorConditionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalogOperand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnalogOperandAccess().getEqualsEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getAnalogOperandAccess().getEqualsEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnalogOperandAccess().getGreaterEnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getAnalogOperandAccess().getGreaterEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAnalogOperandAccess().getLowerEnumLiteralDeclaration_2()); }
		('<')
		{ after(grammarAccess.getAnalogOperandAccess().getLowerEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAnalogOperandAccess().getGreaterEqualsEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getAnalogOperandAccess().getGreaterEqualsEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getAnalogOperandAccess().getLowerEqualsEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getAnalogOperandAccess().getLowerEqualsEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getRedEnumLiteralDeclaration_0()); }
		('red')
		{ after(grammarAccess.getColorAccess().getRedEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getColorAccess().getBlueEnumLiteralDeclaration_1()); }
		('blue')
		{ after(grammarAccess.getColorAccess().getBlueEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getColorAccess().getOrangeEnumLiteralDeclaration_2()); }
		('orange')
		{ after(grammarAccess.getColorAccess().getOrangeEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_3()); }
		('black')
		{ after(grammarAccess.getColorAccess().getBlackEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_4()); }
		('white')
		{ after(grammarAccess.getColorAccess().getWhiteEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getColorAccess().getBuildingEnumLiteralDeclaration_5()); }
		('building')
		{ after(grammarAccess.getColorAccess().getBuildingEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Camera__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCameraAccess().getVery_rightEnumLiteralDeclaration_0()); }
		('very right')
		{ after(grammarAccess.getCameraAccess().getVery_rightEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCameraAccess().getVery_leftEnumLiteralDeclaration_1()); }
		('very left')
		{ after(grammarAccess.getCameraAccess().getVery_leftEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCameraAccess().getLeftEnumLiteralDeclaration_2()); }
		('left')
		{ after(grammarAccess.getCameraAccess().getLeftEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCameraAccess().getRightEnumLiteralDeclaration_3()); }
		('right')
		{ after(grammarAccess.getCameraAccess().getRightEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getCameraAccess().getCenterEnumLiteralDeclaration_4()); }
		('center')
		{ after(grammarAccess.getCameraAccess().getCenterEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getForwardEnumLiteralDeclaration_0()); }
		('forward')
		{ after(grammarAccess.getDirectionAccess().getForwardEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_1()); }
		('left')
		{ after(grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_2()); }
		('right')
		{ after(grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getBackwardEnumLiteralDeclaration_3()); }
		('backward')
		{ after(grammarAccess.getDirectionAccess().getBackwardEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getStopEnumLiteralDeclaration_4()); }
		('stop')
		{ after(grammarAccess.getDirectionAccess().getStopEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getDistance_leftEnumLiteralDeclaration_0()); }
		('distance left')
		{ after(grammarAccess.getSensorAccess().getDistance_leftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getDistance_rightEnumLiteralDeclaration_1()); }
		('distance right')
		{ after(grammarAccess.getSensorAccess().getDistance_rightEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getFrontEnumLiteralDeclaration_2()); }
		('front')
		{ after(grammarAccess.getSensorAccess().getFrontEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group__0__Impl
	rule__Car__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getGroup_0()); }
	(rule__Car__Group_0__0)?
	{ after(grammarAccess.getCarAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group__1__Impl
	rule__Car__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getGroup_1()); }
	(rule__Car__Group_1__0)?
	{ after(grammarAccess.getCarAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group__2__Impl
	rule__Car__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getOrdersKeyword_2()); }
	'orders:'
	{ after(grammarAccess.getCarAccess().getOrdersKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group__3__Impl
	rule__Car__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getLineFeedKeyword_3()); }
	'\n'
	{ after(grammarAccess.getCarAccess().getLineFeedKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group__4__Impl
	rule__Car__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getOrdersAssignment_4()); }
	(rule__Car__OrdersAssignment_4)
	{ after(grammarAccess.getCarAccess().getOrdersAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getGroup_5()); }
	(rule__Car__Group_5__0)*
	{ after(grammarAccess.getCarAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Car__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_0__0__Impl
	rule__Car__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getNamedKeyword_0_0()); }
	'named'
	{ after(grammarAccess.getCarAccess().getNamedKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getNameAssignment_0_1()); }
	(rule__Car__NameAssignment_0_1)
	{ after(grammarAccess.getCarAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Car__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_1__0__Impl
	rule__Car__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getRulesKeyword_1_0()); }
	'rules:\n'
	{ after(grammarAccess.getCarAccess().getRulesKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_1__1__Impl
	rule__Car__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getRulesAssignment_1_1()); }
	(rule__Car__RulesAssignment_1_1)
	{ after(grammarAccess.getCarAccess().getRulesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getGroup_1_2()); }
	(rule__Car__Group_1_2__0)*
	{ after(grammarAccess.getCarAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Car__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_1_2__0__Impl
	rule__Car__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getLineFeedKeyword_1_2_0()); }
	'\n'
	{ after(grammarAccess.getCarAccess().getLineFeedKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getRulesAssignment_1_2_1()); }
	(rule__Car__RulesAssignment_1_2_1)
	{ after(grammarAccess.getCarAccess().getRulesAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Car__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_5__0__Impl
	rule__Car__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getLineFeedKeyword_5_0()); }
	'\n'
	{ after(grammarAccess.getCarAccess().getLineFeedKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Car__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCarAccess().getOrdersAssignment_5_1()); }
	(rule__Car__OrdersAssignment_5_1)
	{ after(grammarAccess.getCarAccess().getOrdersAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DirectRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectRule__Group__0__Impl
	rule__DirectRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectRuleAccess().getConditionAssignment_0()); }
	(rule__DirectRule__ConditionAssignment_0)
	{ after(grammarAccess.getDirectRuleAccess().getConditionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectRule__Group__1__Impl
	rule__DirectRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectRuleAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getDirectRuleAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectRuleAccess().getEffectAssignment_2()); }
	(rule__DirectRule__EffectAssignment_2)
	{ after(grammarAccess.getDirectRuleAccess().getEffectAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PersistingRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PersistingRule__Group__0__Impl
	rule__PersistingRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPersistingRuleAccess().getConditionAssignment_0()); }
	(rule__PersistingRule__ConditionAssignment_0)
	{ after(grammarAccess.getPersistingRuleAccess().getConditionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PersistingRule__Group__1__Impl
	rule__PersistingRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPersistingRuleAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getPersistingRuleAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PersistingRule__Group__2__Impl
	rule__PersistingRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPersistingRuleAccess().getEffectAssignment_2()); }
	(rule__PersistingRule__EffectAssignment_2)
	{ after(grammarAccess.getPersistingRuleAccess().getEffectAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PersistingRule__Group__3__Impl
	rule__PersistingRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPersistingRuleAccess().getUntilKeyword_3()); }
	'until'
	{ after(grammarAccess.getPersistingRuleAccess().getUntilKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PersistingRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPersistingRuleAccess().getStopAssignment_4()); }
	(rule__PersistingRule__StopAssignment_4)
	{ after(grammarAccess.getPersistingRuleAccess().getStopAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbilityEffect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbilityEffect__Group__0__Impl
	rule__AbilityEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbilityEffectAccess().getCanKeyword_0()); }
	'can'
	{ after(grammarAccess.getAbilityEffectAccess().getCanKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbilityEffect__Group__1__Impl
	rule__AbilityEffect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbilityEffectAccess().getDisableAssignment_1()); }
	(rule__AbilityEffect__DisableAssignment_1)?
	{ after(grammarAccess.getAbilityEffectAccess().getDisableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbilityEffect__Group__2__Impl
	rule__AbilityEffect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbilityEffectAccess().getGoKeyword_2()); }
	'go'
	{ after(grammarAccess.getAbilityEffectAccess().getGoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbilityEffect__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbilityEffectAccess().getDirectionAssignment_3()); }
	(rule__AbilityEffect__DirectionAssignment_3)
	{ after(grammarAccess.getAbilityEffectAccess().getDirectionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAction_0()); }
	()
	{ after(grammarAccess.getCommandAccess().getCommandAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getGroup_1()); }
	(rule__Command__Group_1__0)?
	{ after(grammarAccess.getCommandAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__0__Impl
	rule__Command__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getGoKeyword_1_0()); }
	('go')?
	{ after(grammarAccess.getCommandAccess().getGoKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getDirectionAssignment_1_1()); }
	(rule__Command__DirectionAssignment_1_1)
	{ after(grammarAccess.getCommandAccess().getDirectionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColorCondition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_0__0__Impl
	rule__ColorCondition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getColorConditionAction_0_0()); }
	()
	{ after(grammarAccess.getColorConditionAccess().getColorConditionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getGroup_0_1()); }
	(rule__ColorCondition__Group_0_1__0)
	{ after(grammarAccess.getColorConditionAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColorCondition__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_0_1__0__Impl
	rule__ColorCondition__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getColorAssignment_0_1_0()); }
	(rule__ColorCondition__ColorAssignment_0_1_0)
	{ after(grammarAccess.getColorConditionAccess().getColorAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_0_1__1__Impl
	rule__ColorCondition__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getEqualsSignEqualsSignKeyword_0_1_1()); }
	'=='
	{ after(grammarAccess.getColorConditionAccess().getEqualsSignEqualsSignKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getCameraAssignment_0_1_2()); }
	(rule__ColorCondition__CameraAssignment_0_1_2)
	{ after(grammarAccess.getColorConditionAccess().getCameraAssignment_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColorCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_1__0__Impl
	rule__ColorCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getCameraAssignment_1_0()); }
	(rule__ColorCondition__CameraAssignment_1_0)
	{ after(grammarAccess.getColorConditionAccess().getCameraAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_1__1__Impl
	rule__ColorCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getEqualsSignEqualsSignKeyword_1_1()); }
	'=='
	{ after(grammarAccess.getColorConditionAccess().getEqualsSignEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColorCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorConditionAccess().getColorAssignment_1_2()); }
	(rule__ColorCondition__ColorAssignment_1_2)
	{ after(grammarAccess.getColorConditionAccess().getColorAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DistanceCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DistanceCondition__Group__0__Impl
	rule__DistanceCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDistanceConditionAccess().getSensorAssignment_0()); }
	(rule__DistanceCondition__SensorAssignment_0)
	{ after(grammarAccess.getDistanceConditionAccess().getSensorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DistanceCondition__Group__1__Impl
	rule__DistanceCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDistanceConditionAccess().getOperatorAssignment_1()); }
	(rule__DistanceCondition__OperatorAssignment_1)
	{ after(grammarAccess.getDistanceConditionAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DistanceCondition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDistanceConditionAccess().getDistanceAssignment_2()); }
	(rule__DistanceCondition__DistanceAssignment_2)
	{ after(grammarAccess.getDistanceConditionAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__0__Impl
	rule__Float__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getGroup_1()); }
	(rule__Float__Group_1__0)?
	{ after(grammarAccess.getFloatAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group_1__0__Impl
	rule__Float__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Car__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarAccess().getNameEStringParserRuleCall_0_1_0()); }
		ruleEString
		{ after(grammarAccess.getCarAccess().getNameEStringParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__RulesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarAccess().getRulesRuleParserRuleCall_1_1_0()); }
		ruleRule
		{ after(grammarAccess.getCarAccess().getRulesRuleParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__RulesAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarAccess().getRulesRuleParserRuleCall_1_2_1_0()); }
		ruleRule
		{ after(grammarAccess.getCarAccess().getRulesRuleParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__OrdersAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarAccess().getOrdersCommandParserRuleCall_4_0()); }
		ruleCommand
		{ after(grammarAccess.getCarAccess().getOrdersCommandParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Car__OrdersAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCarAccess().getOrdersCommandParserRuleCall_5_1_0()); }
		ruleCommand
		{ after(grammarAccess.getCarAccess().getOrdersCommandParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__ConditionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectRuleAccess().getConditionConditionParserRuleCall_0_0()); }
		ruleCondition
		{ after(grammarAccess.getDirectRuleAccess().getConditionConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectRule__EffectAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectRuleAccess().getEffectRuleEffectParserRuleCall_2_0()); }
		ruleRuleEffect
		{ after(grammarAccess.getDirectRuleAccess().getEffectRuleEffectParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__ConditionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPersistingRuleAccess().getConditionConditionParserRuleCall_0_0()); }
		ruleCondition
		{ after(grammarAccess.getPersistingRuleAccess().getConditionConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__EffectAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPersistingRuleAccess().getEffectRuleEffectParserRuleCall_2_0()); }
		ruleRuleEffect
		{ after(grammarAccess.getPersistingRuleAccess().getEffectRuleEffectParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PersistingRule__StopAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPersistingRuleAccess().getStopConditionParserRuleCall_4_0()); }
		ruleCondition
		{ after(grammarAccess.getPersistingRuleAccess().getStopConditionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandEffect__CommandAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandEffectAccess().getCommandCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandEffectAccess().getCommandCommandParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__DisableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbilityEffectAccess().getDisableNotKeyword_1_0()); }
		(
			{ before(grammarAccess.getAbilityEffectAccess().getDisableNotKeyword_1_0()); }
			'not'
			{ after(grammarAccess.getAbilityEffectAccess().getDisableNotKeyword_1_0()); }
		)
		{ after(grammarAccess.getAbilityEffectAccess().getDisableNotKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbilityEffect__DirectionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbilityEffectAccess().getDirectionDirectionEnumRuleCall_3_0()); }
		ruleDirection
		{ after(grammarAccess.getAbilityEffectAccess().getDirectionDirectionEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__DirectionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getDirectionDirectionEnumRuleCall_1_1_0()); }
		ruleDirection
		{ after(grammarAccess.getCommandAccess().getDirectionDirectionEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__ColorAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorConditionAccess().getColorColorEnumRuleCall_0_1_0_0()); }
		ruleColor
		{ after(grammarAccess.getColorConditionAccess().getColorColorEnumRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__CameraAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorConditionAccess().getCameraCameraEnumRuleCall_0_1_2_0()); }
		ruleCamera
		{ after(grammarAccess.getColorConditionAccess().getCameraCameraEnumRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__CameraAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorConditionAccess().getCameraCameraEnumRuleCall_1_0_0()); }
		ruleCamera
		{ after(grammarAccess.getColorConditionAccess().getCameraCameraEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorCondition__ColorAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorConditionAccess().getColorColorEnumRuleCall_1_2_0()); }
		ruleColor
		{ after(grammarAccess.getColorConditionAccess().getColorColorEnumRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__SensorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceConditionAccess().getSensorSensorEnumRuleCall_0_0()); }
		ruleSensor
		{ after(grammarAccess.getDistanceConditionAccess().getSensorSensorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceConditionAccess().getOperatorAnalogOperandEnumRuleCall_1_0()); }
		ruleAnalogOperand
		{ after(grammarAccess.getDistanceConditionAccess().getOperatorAnalogOperandEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DistanceCondition__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceConditionAccess().getDistanceFloatParserRuleCall_2_0()); }
		ruleFloat
		{ after(grammarAccess.getDistanceConditionAccess().getDistanceFloatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
